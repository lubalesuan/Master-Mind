READMEGeneral comments:All methods work, although I don’t like that my main method is overloaded.There are bugs that I wish I had time to fix, but overall all the methods work correctly.Class mm  Responsible for internal processes in the game – generating combinations, analyzing user’s response, generating next guessMethods* ConstructorBy taking a list of colors and number of slots calls method combinations and generates them* combinations()Using recursion with the base case, where number of slots = 1; generates lists of combinations to be added in the ArrayList<ArrayList<String>>.In the base case we just have one element per list and once we go to bigger number of slots we add elements to already existing lists through iterationComments : I personally found this method very ineffective as it takes a lot of memory (it creates new lists while recurring) The program might get stuck if the user inputs big number of colors or positions.* guess()guess is used to compare and analyze two lists and see the number of correct colors and positions there are in the second list as opposed to the first. It is used to run through combinations and eliminate the ones that don’t return the same response as the one received from the user.Comments: the reason why there is a copyList is because in case of analyzing if the list contains the correct color in incorrect position, we might get a wrong response. As the list can contain several elements (for inst. guess([R,B,B],[R,R,R]) would output 3 correct colors and 1 correct position, although we obviously should get 0 correct colors and 1 correct position). That’s why I remove the matching elements from copylist and then check if copyList contains the element, moreover, remove() method is the reason why I had to use list of lists of strings instead of using list of strings* response()response processes user’s response (correct color, correct position) and generates a string representing response* nextMove()gets a next element from the combinations that were not eliminated and outputs as next guessClass test Contains only main method. Responsible for the game playMethods* Mainwhile loop – checks if user still wants to playPrint statements: - ask the user to input a list of colors and number of slotsThen generates combinations and first guessUser outputs number of correct colors and positions By looping through a list of combinations, we eliminate unnecessary combinations and use the first element in the list as the next guessKeep generating new guesses until the number of pegs of correct colors in correct position doesn’t equal to number of slotsIf user is willing to continue, start a game again. If not, terminate the game.Comments: I wish I put some parts of main method in separate methods because it is overloaded.               Moreover, while looping through the list of combinations and removing unnecessary                   ones, I found a bug. Because in the loop I use indentation of elements  and remove                   elements at the same time, I don’t remove some of the unnecessary combinations ( all                the elements have to be switched to new positions (indexes)). It would be more                preferable to use a hashset, as removing doesn’t require moving elements to new                   positions and thus, skipping some combinations.              